{
  "comments": [
    {
      "unresolved": true,
      "key": {
        "uuid": "0534db96_1a1c332e",
        "filename": "roles/bazelisk-build/tasks/main.yaml",
        "patchSetId": 1
      },
      "lineNbr": 5,
      "author": {
        "id": 1006192
      },
      "writtenOn": "2022-01-10T09:42:21Z",
      "side": 0,
      "message": "I believe this was introduced (@James correct me if I am wrong) it was for validating incoming changes against Java 8 as well, even if the default toolchain was on Java 11 (e.g. stable-3.2, stable-3.3 and stable-3.4).\n\nShould we have instead two validation jobs and two different checks?\n- Java 8 checker\n- Java 11 checker\n\nThen, the Java 8 checker will only be configured for stable-3.2, stable-3.3 and stable-3.4.\n\nWDYT?",
      "range": {
        "startLine": 5,
        "startChar": 36,
        "endLine": 5,
        "endChar": 91
      },
      "revId": "4660e74b1cdfd8ef86aa3dc5218662aa19be3d70",
      "serverId": "173816e5-2b9a-37c3-8a2e-48639d4f1153"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "c7cc643c_cc25ac44",
        "filename": "roles/bazelisk-build/tasks/main.yaml",
        "patchSetId": 1
      },
      "lineNbr": 5,
      "author": {
        "id": 1011323
      },
      "writtenOn": "2022-01-10T09:48:39Z",
      "side": 0,
      "message": "\u003e even if the default toolchain was on Java 11 [...]\n\nThe default java_toolchain already provide you exactly what you want. See the commit message:\n\n  Java toolchain is specified in .bazelrc file in gerrit workspace and\n  thus shouldn\u0027t be specified explicitly.",
      "parentUuid": "0534db96_1a1c332e",
      "range": {
        "startLine": 5,
        "startChar": 36,
        "endLine": 5,
        "endChar": 91
      },
      "revId": "4660e74b1cdfd8ef86aa3dc5218662aa19be3d70",
      "serverId": "173816e5-2b9a-37c3-8a2e-48639d4f1153"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "c5bfdfef_f4041740",
        "filename": "roles/bazelisk-build/tasks/main.yaml",
        "patchSetId": 1
      },
      "lineNbr": 5,
      "author": {
        "id": 1006192
      },
      "writtenOn": "2022-01-10T10:38:26Z",
      "side": 0,
      "message": "\u003e \u003e even if the default toolchain was on Java 11 [...]\n\u003e \n\u003e The default java_toolchain already provide you exactly what you want. See the commit message:\n\u003e \n\u003e   Java toolchain is specified in .bazelrc file in gerrit workspace and\n\u003e   thus shouldn\u0027t be specified explicitly.\n\nI know, let me re-express myself more clearly: the extra option was done *explicitly* for overriding the default Java toolchain defined in .bazelrc: we wanted to make sure that changes are *still* validated against Java 8 even though the default toolchain was on Java 11.\n\nThat is the reason why I believe the best strategy would be to have two separate checkers:\n\n- Java 11 (the default java tool chain)\n- Java 8 (the overridden tool chain)\n\nThe job associated with the Java 8 checker should then keep the overridden java toolchain.\n\nHope that explains what I meant.",
      "parentUuid": "c7cc643c_cc25ac44",
      "range": {
        "startLine": 5,
        "startChar": 36,
        "endLine": 5,
        "endChar": 91
      },
      "revId": "4660e74b1cdfd8ef86aa3dc5218662aa19be3d70",
      "serverId": "173816e5-2b9a-37c3-8a2e-48639d4f1153"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "8d68849a_d54be0ba",
        "filename": "roles/bazelisk-build/tasks/main.yaml",
        "patchSetId": 1
      },
      "lineNbr": 5,
      "author": {
        "id": 1011323
      },
      "writtenOn": "2022-01-10T11:13:40Z",
      "side": 0,
      "message": "\u003e I know, let me re-express myself more clearly: the extra option was done *explicitly* for overriding the default Java toolchain defined in .bazelrc: we wanted to make sure that changes are *still* validated against Java 8 even though the default toolchain was on Java 11.\n\nIt was the case *before* we announced the switch to Java 11.\n\nToday, what regression would you like to catch and on what branch? This is the current situation what happens, when you invoke bazel (without any option):\n\n  $ bazel build release\n\n* stable-3.0: default java toolchain: Java 8\n* stable-3.1: default java toolchain: Java 8\n* stable-3.2: default java toolchain: Java 8\n* stable-3.3: default java toolchain: Java 8\n* stable-3.4: default java toolchain: Java 8\n* stable-3.5: default java toolchain: Java 11, the code can still be built with Java 8\n* master: default java toolchain: Java 11, the code cannot be built with Java 8 anymore\n\nSo your above comment would be only applicable for stable-3.5 only.\n\nHowever, you have suggested: [1] to move change 327478, that clarified Java 8 compatibility is completely removed from master to stable-3.5.\n\nAlso see this announcement: [2] with title:\n\n  [ANNOUNCE] Gerrit to drop support for Java 8 on master\n\nfrom 09.09.2021, 02:14:29, quoting:\n\n  [...]\n  The direct consequence is that Java 8 source-code compatibility cannot be \n  guaranteed anymore on master.\n  Gerrit v3.5.0 will be effectively compatible with Java 11 only.\n  We are also preparing the Gerrit v3.5.0 release notes at [3],\n  where the compatibility with Java 8 is effectively removed,\n  both at the source and binary level.\n  \nShould we revoke the above announcement and re-claim the compatibility of stable-3.5 with Java 8? Also this change is only about Zuul-CI and plugin builds. Where is the Gerrit core CI job that verifies stable-3.5 branch is still compatible with Java 8? If we don\u0027t have/need such a job for gerrit core, why would we need this check on Zuul-CI for gerrit plugins?\n\n[1] https://gerrit-review.googlesource.com/c/gerrit/+/327478/2#message-92a39d9dd86aa5983a30ea91b37cc17c59f694f7\n[2] https://groups.google.com/g/repo-discuss/c/eFL2sDy45Gc/m/a9yY_OAcBgAJ",
      "parentUuid": "c5bfdfef_f4041740",
      "range": {
        "startLine": 5,
        "startChar": 36,
        "endLine": 5,
        "endChar": 91
      },
      "revId": "4660e74b1cdfd8ef86aa3dc5218662aa19be3d70",
      "serverId": "173816e5-2b9a-37c3-8a2e-48639d4f1153"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "53ca789a_f7ce8910",
        "filename": "roles/bazelisk-build/tasks/main.yaml",
        "patchSetId": 1
      },
      "lineNbr": 5,
      "author": {
        "id": 1011323
      },
      "writtenOn": "2022-01-10T11:23:33Z",
      "side": 0,
      "message": "To add to my above comment: you said, in your comment on change 327478, quoting:\n\n  MAY means that it *can* be compatible but you should not rely on it because \n  things are likely to change. I could just push a change now on stable-3.5, which \n  is validated and built against Java 11, and once is merged, I can change the MAY \n  to IS.\n\nI just cherry-picked change 327777 that is Java 8 incompatible change to stable-3.5 branch. Once it is merged, the situation would be:\n\n* stable-3.5: default java toolchain: Java 11, the code cannot be built with Java 8 anymore\n* master: default java toolchain: Java 11, the code cannot be built with Java 8 anymore",
      "parentUuid": "8d68849a_d54be0ba",
      "range": {
        "startLine": 5,
        "startChar": 36,
        "endLine": 5,
        "endChar": 91
      },
      "revId": "4660e74b1cdfd8ef86aa3dc5218662aa19be3d70",
      "serverId": "173816e5-2b9a-37c3-8a2e-48639d4f1153"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "66ec067d_a2b73df2",
        "filename": "roles/bazelisk-build/tasks/main.yaml",
        "patchSetId": 1
      },
      "lineNbr": 5,
      "author": {
        "id": 1006192
      },
      "writtenOn": "2022-01-10T23:21:41Z",
      "side": 0,
      "message": "I am fine with stable-3.5 and master, no issues with that.\n\nMy concern is stable-3.3 and stable-3.4: how do we validate that they\u0027ll be able to validated against Java 8 and Java 11 with Zuul? (we release Gerrit v3.3.* and v3.4.* on Java 11 but the code needs to be compatible with both Java 8 and Java 11)",
      "parentUuid": "53ca789a_f7ce8910",
      "range": {
        "startLine": 5,
        "startChar": 36,
        "endLine": 5,
        "endChar": 91
      },
      "revId": "4660e74b1cdfd8ef86aa3dc5218662aa19be3d70",
      "serverId": "173816e5-2b9a-37c3-8a2e-48639d4f1153"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "ddb21acc_44bf06f2",
        "filename": "roles/bazelisk-build/tasks/main.yaml",
        "patchSetId": 1
      },
      "lineNbr": 5,
      "author": {
        "id": 1011323
      },
      "writtenOn": "2022-01-11T11:10:42Z",
      "side": 0,
      "message": "I missed that default java toolchain is java 11 on stable-3.3 and stable-3.4 branches.\n\nBut what\u0027s the point to complicate the CI, if officially released images for 3.3 and 3.4 release lines can only be run with Java 11 anyway?\n\n  $ java -fullversion\n  openjdk full version \"1.8.0_312-b07\"\n  \n  $ wget https://repo1.maven.org/maven2/com/google/gerrit/gerrit-war/3.3.9/gerrit-war-3.3.9.war\n\n  $ java -jar gerrit-war-3.3.9.war version\n  Error: A JNI error has occurred, please check your installation and try again\n  Exception in thread \"main\" java.lang.UnsupportedClassVersionError:\n  Main has been compiled by a more recent version of the Java Runtime (class file \n  version 55.0), \n  this version of the Java Runtime only recognizes class file versions up to 52.0\n\nAlternatively, we could revert overriding toolchain to java11 on stable-3.3 and stable-3.4 branches in .bazelrc and build with Java 8 per default there. That way we should be save. \n\nMy change 264535 wasn\u0027t intended to be active on branches, where Java 8 compatibility has to be provided. Best way to provide Java 8 compatibility is to build with Java 8 per default.",
      "parentUuid": "66ec067d_a2b73df2",
      "range": {
        "startLine": 5,
        "startChar": 36,
        "endLine": 5,
        "endChar": 91
      },
      "revId": "4660e74b1cdfd8ef86aa3dc5218662aa19be3d70",
      "serverId": "173816e5-2b9a-37c3-8a2e-48639d4f1153"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "640b301a_06c33219",
        "filename": "roles/bazelisk-build/tasks/main.yaml",
        "patchSetId": 1
      },
      "lineNbr": 5,
      "author": {
        "id": 1006192
      },
      "writtenOn": "2022-01-11T13:31:40Z",
      "side": 0,
      "message": "\u003e Alternatively, we could revert overriding toolchain to java11 on stable-3.3 and\n\u003e stable-3.4 branches in .bazelrc and build with Java 8 per default there.\n\u003e That way we should be save. \n\nThings are a bit more complicated though, because you could have a change that is compatible with Java 8 but NOT with Java 11, causing the merging of changes that would break the main build.\n\nI don\u0027t believe it is just a problem of stable-3.3 and stable-3.4, we\u0027ll have the same problem with master as we are getting ready to support also Java 17 on master.\n\nGoogle is on Java 11 anyway on master, the only one I recall needed to have the source code buildable with Java 8 on stable-3.3/3.4 was SAP. Possibly they\u0027ve upgraded now to Java 11?\n\n@Matthias would you be OK in switching off compatibility with Java 8 on stable-3.3/3.4?",
      "parentUuid": "ddb21acc_44bf06f2",
      "range": {
        "startLine": 5,
        "startChar": 36,
        "endLine": 5,
        "endChar": 91
      },
      "revId": "4660e74b1cdfd8ef86aa3dc5218662aa19be3d70",
      "serverId": "173816e5-2b9a-37c3-8a2e-48639d4f1153"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "b5b610b8_47339513",
        "filename": "roles/bazelisk-build/tasks/main.yaml",
        "patchSetId": 1
      },
      "lineNbr": 5,
      "author": {
        "id": 1011323
      },
      "writtenOn": "2022-01-11T21:24:13Z",
      "side": 0,
      "message": "\u003e Things are a bit more complicated though, because you could have a change that is compatible with Java 8 but NOT with Java 11, causing the merging of changes that would break the main build.\n\nRather a theoretical case, that we don\u0027t need to care about? Especially not on very stable branches stable-3.3 and stable-3.4 where we do not accept big changes, but only severe security vulnerabilities and critical regressions. And even if you would manage to conduct Java 8 compatible but NOT Java 11 compatible change (show me how?!) we would catch that immediately, as you would merge that change up to master, that is built with Java 11 anyway (or during release build from stable-3.3 branch with Java 11).\n\nI uploaded change 327911 to guarantee Java 8 compatibility on stable-3.3 and stable-3.4 branches (and this change should be reverted starting from stable-3.5 branch).\n\nThat way, we can simplify the Zuul and GerritForge CI. To continue to publish official Gerrit images built with Java 11 byte code we would have to pass java 11 toolchain during release build (we would update the documentation for release manager).",
      "parentUuid": "640b301a_06c33219",
      "range": {
        "startLine": 5,
        "startChar": 36,
        "endLine": 5,
        "endChar": 91
      },
      "revId": "4660e74b1cdfd8ef86aa3dc5218662aa19be3d70",
      "serverId": "173816e5-2b9a-37c3-8a2e-48639d4f1153"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "a04217f9_67da98a2",
        "filename": "roles/bazelisk-build/tasks/main.yaml",
        "patchSetId": 1
      },
      "lineNbr": 5,
      "author": {
        "id": 1006192
      },
      "writtenOn": "2022-01-11T21:58:16Z",
      "side": 0,
      "message": "\u003e Rather a theoretical case, that we don\u0027t need to care about? Especially not on very stable branches stable-3.3 and stable-3.4 where we do not accept big changes, but only severe security vulnerabilities and critical regressions. \n\nOn stable branches we are generally available to fix any bug, not just security and critical fixes (see [3]). However, I do agree that *IF* we do not need to keep that complexity anymore, I\u0027d just drop Java 8 altogether on stable-3.3/3.4 as we officially release only on Java 11.\n\nI\u0027ve added a discussion point to the next ESC (which is tomorrow) on this.\n\n[3] https://www.gerritcodereview.com/support.html",
      "parentUuid": "b5b610b8_47339513",
      "range": {
        "startLine": 5,
        "startChar": 36,
        "endLine": 5,
        "endChar": 91
      },
      "revId": "4660e74b1cdfd8ef86aa3dc5218662aa19be3d70",
      "serverId": "173816e5-2b9a-37c3-8a2e-48639d4f1153"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "d0de36ac_872ba6c7",
        "filename": "roles/bazelisk-build/tasks/main.yaml",
        "patchSetId": 1
      },
      "lineNbr": 5,
      "author": {
        "id": 1011323
      },
      "writtenOn": "2022-01-11T22:40:32Z",
      "side": 0,
      "message": "BTW, I just realized, it\u0027s not enough to choose the right java toolchain. The JAVA_HOME should also point to the right java version.\n\nIf you have have a mismatch:\n\n  $ echo $JAVA_HOME\n  /usr/lib64/jvm/java-11-openjdk\n\nAnd with this Java 8 incompatible change:\n\n  diff --git a/java/Main.java b/java/Main.java\nindex 11d8234c60..0e75b7c687 100644\n--- a/java/Main.java\n+++ b/java/Main.java\n@@ -12,6 +12,8 @@\n // See the License for the specific language governing permissions and\n // limitations under the License.\n \n+import java.util.List;\n+\n public final class Main {\n   private static final String FLOGGER_BACKEND_PROPERTY \u003d \"flogger.backend_factory\";\n   private static final String FLOGGER_LOGGING_CONTEXT \u003d \"flogger.logging_context\";\n@@ -23,6 +25,7 @@ public final class Main {\n   //\n \n   public static void main(String[] argv) throws Exception {\n+    List\u003cString\u003e notUsed \u003d List.of();\n\n\nyou would still produce broken release.war final artifact:\n\n  $ JAVA_HOME\u003d/usr/lib64/jvm/java-11-openjdk \\\n    bazelisk build --java_toolchain\u003d//tools:error_prone_warnings_toolchain headless\n  INFO: Invocation ID: 0d9cdadb-882d-4229-b660-db38a1eb47da\n  INFO: Analyzed target //:headless (177 packages loaded, 2752 targets configured).\n  INFO: Found 1 target...\n  Target //:headless up-to-date:\n    bazel-bin/headless.war\n  INFO: Elapsed time: 34.302s, Critical Path: 15.83s\n  INFO: 19 processes: 13 remote cache hit, 5 internal, 1 linux-sandbox.\n  INFO: Build completed successfully, 19 total actions\n\nNow, try to run it on Java 8:\n\n  $ java -fullverssion\n  openjdk full version \"1.8.0_312-b07\"\n\nbroken:\n\n  $ java -jar bazel-bin/headless.war\n  Exception in thread \"main\" java.lang.NoSuchMethodError: \n  java.util.List.of()Ljava/util/List;\n  at Main.main(Main.java:28)",
      "parentUuid": "a04217f9_67da98a2",
      "range": {
        "startLine": 5,
        "startChar": 36,
        "endLine": 5,
        "endChar": 91
      },
      "revId": "4660e74b1cdfd8ef86aa3dc5218662aa19be3d70",
      "serverId": "173816e5-2b9a-37c3-8a2e-48639d4f1153"
    }
  ]
}