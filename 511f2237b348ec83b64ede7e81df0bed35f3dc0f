{
  "comments": [
    {
      "key": {
        "uuid": "2a8a9a7e_cceb2d29",
        "filename": "playbooks/gerrit/build.yaml",
        "patchSetId": 14
      },
      "lineNbr": 33,
      "author": {
        "id": 1006192
      },
      "writtenOn": "2020-04-01T11:35:06Z",
      "side": 1,
      "message": "Can\u0027t we just use the Docker image we have and reuse it in Zuul?\n\nThere are two advantages in doing that:\n1. We speedup the migration process from the current Jenkins build to Zuul\n2. We keep them in sync until we \"unplug\" Jenkins: they are the same image\n3. We allow people to run the build locally *exactly in the same way* Zuul would do it\n\nWDYT?",
      "range": {
        "startLine": 14,
        "startChar": 0,
        "endLine": 33,
        "endChar": 89
      },
      "revId": "511f2237b348ec83b64ede7e81df0bed35f3dc0f",
      "serverId": "173816e5-2b9a-37c3-8a2e-48639d4f1153",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "87a1b2e2_a393c45d",
        "filename": "playbooks/gerrit/build.yaml",
        "patchSetId": 14
      },
      "lineNbr": 33,
      "author": {
        "id": 1011323
      },
      "writtenOn": "2020-04-01T12:59:25Z",
      "side": 1,
      "message": "\u003e Can\u0027t we just use the Docker image we have and reuse it in Zuul?\n\nThe plan was always to use RBE in GCP. With my recent change (still pending for review: [1]), we are consuming are own GCP Docker image (with upgraded Git core version to 2.6). That Docker image is based on Ubuntu 18.04. Our current Docker image used in Jenkins GerritForge build is based on outdated Debian release and outdated Chromuim release 1.69.xxx. Attempt to bump Debian image is stale: [2].\n\nBecause of action caches current Jenkins Docker image is 5 GB big. With RBE on GCP, the caching problem is solved.\n\nMoreover specific Docker image is only needed for PolyGerrit tests, that is basically unrelated to Gerrit backend tests.\n\nMajor build targets and java tests with NoteDb and ReviewDb modes can use RBE already today:\n\n  $ bazelisk build --config\u003dremote :release :api plugins:core\n  $ bazelisk test --config\u003dremote javatests/...\n\nit takes a couple of minutes, and uses extensively caching.\n\nShould we take PolyGerrit verification out of the picture for now in Zuul intergration and just move forward with RBE on GCP?\n\n* [1] https://gerrit-review.googlesource.com/c/gerrit/+/260873\n* [2] https://gerrit-review.googlesource.com/c/gerrit-ci-scripts/+/237181",
      "parentUuid": "2a8a9a7e_cceb2d29",
      "range": {
        "startLine": 14,
        "startChar": 0,
        "endLine": 33,
        "endChar": 89
      },
      "revId": "511f2237b348ec83b64ede7e81df0bed35f3dc0f",
      "serverId": "173816e5-2b9a-37c3-8a2e-48639d4f1153",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "bf0f5ed6_0bc97e2d",
        "filename": "playbooks/gerrit/build.yaml",
        "patchSetId": 14
      },
      "lineNbr": 33,
      "author": {
        "id": 1006192
      },
      "writtenOn": "2020-04-01T13:12:49Z",
      "side": 1,
      "message": "\u003e \u003e Can\u0027t we just use the Docker image we have and reuse it in Zuul?\n\u003e \n\u003e The plan was always to use RBE in GCP. With my recent change (still pending for review: [1]), we are consuming are own GCP Docker image (with upgraded Git core version to 2.6).\n\n+1\n\nRBE is optional though in our build process: we do not require all developers to use RBE isn\u0027t it? We should also offer the ability to build *without* RBE.\n\n\u003e That Docker image is based on Ubuntu 18.04. Our current Docker image used in Jenkins GerritForge build is based on outdated Debian release and outdated Chromuim release 1.69.xxx. Attempt to bump Debian image is stale: [2].\n\nThat\u0027s a different point, Chrome 80 breaks our tests and the Debian upgrade won\u0027t allow to build and test with Java 8.\n\nOnce we sort out both of them we can upgrade our Debian. \n\n\u003e Because of action caches current Jenkins Docker image is 5 GB big. With RBE on GCP, the caching problem is solved.\n\n+1, agreed.\n\n\u003e Moreover specific Docker image is only needed for PolyGerrit tests, that is basically unrelated to Gerrit backend tests.\n\nYes, PolyGerrit is the guy that has pre-requisites. For the Gerrit tests, only Java + Docker are needed. Does RBE support the ability to use a Docker server through DOCKER_HOST?\n\n\u003e Major build targets and java tests with NoteDb and ReviewDb modes can use RBE already today:\n\u003e \n\u003e   $ bazelisk build --config\u003dremote :release :api plugins:core\n\u003e   $ bazelisk test --config\u003dremote javatests/...\n\nWHy don\u0027t we start using them today?\n\n\u003e it takes a couple of minutes, and uses extensively caching.\n\nYeah, that\u0027s super-cool :-)\n\n\u003e Should we take PolyGerrit verification out of the picture for now in Zuul intergration and just move forward with RBE on GCP?\n\nYou mean having a mixed environment, backend tests verified with Zuul and PolyGerrit tests with Jenkins? I believe it would be messy.\n\nAlso, we do need Docker for the backend tests.",
      "parentUuid": "87a1b2e2_a393c45d",
      "range": {
        "startLine": 14,
        "startChar": 0,
        "endLine": 33,
        "endChar": 89
      },
      "revId": "511f2237b348ec83b64ede7e81df0bed35f3dc0f",
      "serverId": "173816e5-2b9a-37c3-8a2e-48639d4f1153",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "dc2683b2_2ae75a78",
        "filename": "playbooks/gerrit/build.yaml",
        "patchSetId": 14
      },
      "lineNbr": 33,
      "author": {
        "id": 1087826
      },
      "writtenOn": "2020-04-01T14:41:25Z",
      "side": 1,
      "message": "I still think there is value in fully understanding what is required for the tests even if we use docker or RBE later.  The latest patchset is actually passing tests.  If you follow the link to the buildset information, you will see that it is succeeding for the three stable branches; it might even succeed for the master branch, but it\u0027s taking a long time and hit the timeout (if you didn\u0027t notice this, this is why I think subchecks are important).\n\nHere\u0027s the link to the results:\n\nhttps://ci.gerritcodereview.com/t/gerrit/buildset/cc7576d0ea584e7c93501682b64dcff3\n\nLet\u0027s just look at the stable-3.1 branch for the moment.  If I break down the time used for each part of the job:\n\nCopy git repos onto remote node: 4m\nPrepare submodules: 4m\nInstall deps: 2m\nBazelisk build: 25m\ngen_api_install: 0m\napi_install: 0m\neclipse/project.py: 2m\nbazelisk test: 79m\npolygerrit-ui/app/run_test.sh: 1m\n\nIf we categorize those a bit, we are spending:\n\n8 minutes performing Zuul-required setup.  We can speed that up later with caching, but for now, let\u0027s just discount it.\n\n2 minutes installing dependencies.  If we used docker, we would save these two minutes, but add a little time to download the image.  This is not very much time, so I don\u0027t think we should focus our efforts here at the moment.\n\n25 minutes running bazelisk build.  Now I have three questions about this:\n1) Is bazelisk build necessary before bazelisk test?\n2) If not, would it speed anything up to omit it?\n3) Obviously we should build all of gerrit when we are evaluating a change to gerrit, but I think earlier Thomas suggested that in the core plugin jobs, we might be able to just build/test the core plugin.  Which is the best approach for a core plugin test job?  Build all of gerrit with all the plugins, or build just plugin that is changing?\n\nNo time is used running the api_install and eclipse project scripts.  I\u0027m curious what those are and what they do to set up for the unit tests?  Or are they here just to exercise them to make sure they don\u0027t have errors?\n\n79 minutes running bazelisk test.  Is it expected that these should take so long?  We\u0027re running on an n1-standard-2 VM, that\u0027s 2vcpus with 8G of ram.  should we bump that up to a 2vcpu machine?\n\nFinally, it\u0027s looking like the ./polygerrit-ui/app/run_test.sh didn\u0027t run any tests.  However, adding in the polygerrit dependencies at the start of the job did enable the java tests to succeed (they were failing with polygerrit errors earlier).  So can you explain why the java tests require a bunch of npm modules?  And does this polygerrit script at the end require a build of gerrit, or can it run standalone in its own job?\n\nThanks again for helping me understand what\u0027s going on here.",
      "parentUuid": "bf0f5ed6_0bc97e2d",
      "range": {
        "startLine": 14,
        "startChar": 0,
        "endLine": 33,
        "endChar": 89
      },
      "revId": "511f2237b348ec83b64ede7e81df0bed35f3dc0f",
      "serverId": "173816e5-2b9a-37c3-8a2e-48639d4f1153",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "d8d31bf8_09661509",
        "filename": "playbooks/gerrit/build.yaml",
        "patchSetId": 14
      },
      "lineNbr": 33,
      "author": {
        "id": 1006192
      },
      "writtenOn": "2020-04-01T15:07:20Z",
      "side": 1,
      "message": "\u003e I still think there is value in fully understanding what is required for the tests even if we use docker or RBE later.  The latest patchset is actually passing tests.  If you follow the link to the buildset information, you will see that it is succeeding for the three stable branches; it might even succeed for the master branch, but it\u0027s taking a long time and hit the timeout (if you didn\u0027t notice this, this is why I think subchecks are important).\n\u003e \n\u003e Here\u0027s the link to the results:\n\u003e \n\u003e https://ci.gerritcodereview.com/t/gerrit/buildset/cc7576d0ea584e7c93501682b64dcff3\n\u003e \n\u003e Let\u0027s just look at the stable-3.1 branch for the moment.  If I break down the time used for each part of the job:\n\u003e \n\u003e Copy git repos onto remote node: 4m\n\u003e Prepare submodules: 4m\n\u003e Install deps: 2m\n\u003e Bazelisk build: 25m\n\u003e gen_api_install: 0m\n\u003e api_install: 0m\n\u003e eclipse/project.py: 2m\n\u003e bazelisk test: 79m\n\nw00t?\n\n\u003e polygerrit-ui/app/run_test.sh: 1m\n\nAre you sure PolyGerrit tests are actually executed?\n1m seems too low.\n\n\u003e If we categorize those a bit, we are spending:\n\u003e \n\u003e 8 minutes performing Zuul-required setup.  We can speed that up later with caching, but for now, let\u0027s just discount it.\n\u003e \n\u003e 2 minutes installing dependencies.  If we used docker, we would save these two minutes, but add a little time to download the image.  This is not very much time, so I don\u0027t think we should focus our efforts here at the moment.\n\nIt actually makes a difference, because of the caching.\nAs DavidO said, once we are in RBE then the Docker-cached image doesn\u0027t bring so many benefits.\n\nAlso, bear in mind that resources for building the image may disappear from the network (e.g. installing Chrome) and thus having a baseline that is stable is paramount for a reproducible build.\n\n\u003e 25 minutes running bazelisk build.  Now I have three questions about this:\n\u003e 1) Is bazelisk build necessary before bazelisk test?\n\u003e 2) If not, would it speed anything up to omit it?\n\nYes, but not sure how much faster it would be.\nAlso, we would like to have a release.war of that change, and the tests are not producing that artifact.\n\n\u003e 3) Obviously we should build all of gerrit when we are evaluating a change to gerrit, but I think earlier Thomas suggested that in the core plugin jobs, we might be able to just build/test the core plugin. \n\nYes, the build of a plugin is not the Gerrit build.\n\n\u003e Which is the best approach for a core plugin test job?  Build all of gerrit with all the plugins, or build just plugin that is changing?\n\nThere is a standard script for building a plugin, which runs:\n- bazelisk build plugins/\u003cplugin_name\u003e\n- bazelisk test plugins/\u003cplugin_name\u003e:\u003cpugin_name\u003e_tests\n\nThe second step is not executed if the plugin doesn\u0027t have tests (gosh, it happens some times).\n\nPlease note that all plugins are different and they may be built with:\n- sbt\n- bazel\n- maven\n- or a combination of the above\n\n\u003e No time is used running the api_install and eclipse project scripts.  I\u0027m curious what those are and what they do to set up for the unit tests?  Or are they here just to exercise them to make sure they don\u0027t have errors?\n\nYou need to run api_install otherwise the sbt and maven builds won\u0027t work.\n\n\u003e 79 minutes running bazelisk test.  Is it expected that these should take so long?  We\u0027re running on an n1-standard-2 VM, that\u0027s 2vcpus with 8G of ram.  should we bump that up to a 2vcpu machine?\n\nGerrit build shouldn\u0027t take over 8G of RAM, but we have some failures (flakey) where also with 16G of RAM the build is killed becuase of memory issues. I would suggest to bump that up to 32 GB.\n\nWith regards to CPUs, Bazel eats *a lot* of them and 2 are definitely not enough. I would go with 8 or 16 CPUs.\n\n\u003e Finally, it\u0027s looking like the ./polygerrit-ui/app/run_test.sh didn\u0027t run any tests.  However, adding in the polygerrit dependencies at the start of the job did enable the java tests to succeed (they were failing with polygerrit errors earlier).  So can you explain why the java tests require a bunch of npm modules?  And does this polygerrit script at the end require a build of gerrit, or can it run standalone in its own job?\n\nA couple of things about PolyGerrit tests:\n\n1. They require Chrome to be installed (not Chromium)\n2. They require a display (we use Xvfb on the CI)\n\nWe are trying to upgrade them to Chrome 80, but they fail at the moment. That\u0027s why we stick with an older version Chrome. The problem with that approach is that Google doesn\u0027t keep all the Chrome versions online: when a new version is out, the old version is removed.\n\nUnfortunately, PolyGerrit tests are sensitive to the version of Chrome and it takes a bit of time to get them working on newer versions. That\u0027s why again having Docker was helpful.\n\nP.S. And thanks again James for helping us out :-)\n\nLuca.",
      "parentUuid": "dc2683b2_2ae75a78",
      "range": {
        "startLine": 14,
        "startChar": 0,
        "endLine": 33,
        "endChar": 89
      },
      "revId": "511f2237b348ec83b64ede7e81df0bed35f3dc0f",
      "serverId": "173816e5-2b9a-37c3-8a2e-48639d4f1153",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "d547f58e_2b14fdd7",
        "filename": "playbooks/gerrit/build.yaml",
        "patchSetId": 14
      },
      "lineNbr": 33,
      "author": {
        "id": 1087826
      },
      "writtenOn": "2020-04-01T15:54:20Z",
      "side": 1,
      "message": "\u003e w00t?\n\nYes, that was my thought exactly.  :)\n\n\u003e \u003e polygerrit-ui/app/run_test.sh: 1m\n\u003e \n\u003e Are you sure PolyGerrit tests are actually executed?\n\u003e 1m seems too low.\n\nI\u0027m pretty sure it\u0027s not... see below.\n\n\u003e \u003e 2 minutes installing dependencies.  If we used docker, we would save these two minutes, but add a little time to download the image.  This is not very much time, so I don\u0027t think we should focus our efforts here at the moment.\n\u003e \n\u003e It actually makes a difference, because of the caching.\n\nWhat caching do you mean?  We\u0027re running on a new VM each time, so we don\u0027t have a local docker image cache.  There are ways to mitigate this, but it\u0027ll take a bit more infrastructure.\n\nOh, I think maybe you mean the disappearing-chrome problem you talk about below?\n\n\u003e Also, bear in mind that resources for building the image may disappear from the network (e.g. installing Chrome) and thus having a baseline that is stable is paramount for a reproducible build.\n\nYes, I\u0027m very familiar with that problem.  We have a number of solutions we use in OpenDev to mitigate that, some of which we could use here.  But we should be able to ignore that for a little while while we operate at a smaller scale.\n\nIf we do address this by continuing to use docker images, I\u0027d like to build them in Zuul using its support for speculative container images.  That will allow us to easily test changes to the docker image, including jobs that then subsequently use the docker image, before merging them.\n\n\u003e There is a standard script for building a plugin, which runs:\n\u003e - bazelisk build plugins/\u003cplugin_name\u003e\n\u003e - bazelisk test plugins/\u003cplugin_name\u003e:\u003cpugin_name\u003e_tests\n\u003e \n\u003e The second step is not executed if the plugin doesn\u0027t have tests (gosh, it happens some times).\n\nYep, and that\u0027s what the gerrit-build-plugin job does, and that seems appropriate for a non-core plugin.  But for a core plugin, is that still what we should be doing?  Basically I\u0027m trying to figure out if core plugins should be treated as part of Gerrit, or just like non-core plugins.\n\n\u003e Please note that all plugins are different and they may be built with:\n\u003e - sbt\n\u003e - bazel\n\u003e - maven\n\u003e - or a combination of the above\n\nSurely the core plugins all use bazel?\n\n\u003e \u003e No time is used running the api_install and eclipse project scripts.  I\u0027m curious what those are and what they do to set up for the unit tests?  Or are they here just to exercise them to make sure they don\u0027t have errors?\n\u003e \n\u003e You need to run api_install otherwise the sbt and maven builds won\u0027t work.\n\nWhat are the sbt and maven builds?  Is that something that happens inside bazelisk test?  Because I don\u0027t see anything after api_install about maven.\n \n\u003e \u003e 79 minutes running bazelisk test.  Is it expected that these should take so long?  We\u0027re running on an n1-standard-2 VM, that\u0027s 2vcpus with 8G of ram.  should we bump that up to a 2vcpu machine?\n\u003e \n\u003e Gerrit build shouldn\u0027t take over 8G of RAM, but we have some failures (flakey) where also with 16G of RAM the build is killed becuase of memory issues. I would suggest to bump that up to 32 GB.\n\u003e \n\u003e With regards to CPUs, Bazel eats *a lot* of them and 2 are definitely not enough. I would go with 8 or 16 CPUs.\n\nThanks, sounds like n1-standard-8 is the minumum, and we may want 16.  Added in Ied09366e4714b8824f2152d8d53342dd3129e3a6.\n\n\u003e A couple of things about PolyGerrit tests:\n\u003e \n\u003e 1. They require Chrome to be installed (not Chromium)\n\u003e 2. They require a display (we use Xvfb on the CI)\n\u003e \n\u003e We are trying to upgrade them to Chrome 80, but they fail at the moment. That\u0027s why we stick with an older version Chrome. The problem with that approach is that Google doesn\u0027t keep all the Chrome versions online: when a new version is out, the old version is removed.\n\u003e \n\u003e Unfortunately, PolyGerrit tests are sensitive to the version of Chrome and it takes a bit of time to get them working on newer versions. That\u0027s why again having Docker was helpful.\n\nOkay, that helps.  I\u0027d like to just set the polygerrit tests aside for the moment and focus on the java tests.",
      "parentUuid": "d8d31bf8_09661509",
      "range": {
        "startLine": 14,
        "startChar": 0,
        "endLine": 33,
        "endChar": 89
      },
      "revId": "511f2237b348ec83b64ede7e81df0bed35f3dc0f",
      "serverId": "173816e5-2b9a-37c3-8a2e-48639d4f1153",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "bcff4dc2_39412572",
        "filename": "playbooks/gerrit/build.yaml",
        "patchSetId": 14
      },
      "lineNbr": 33,
      "author": {
        "id": 1011323
      },
      "writtenOn": "2020-04-01T16:04:23Z",
      "side": 1,
      "message": "\u003e I\u0027d like to just set the polygerrit tests aside for the moment and focus on the java tests.\n\nThat was exactly my suggestion. forget PolyGerrit tests for now. Make the rest work. make it work on RBE on GCP. For that you need my pending change that built gerrit Docker Image based on Ubuntu 18.04. With that change Zuul should be able to build everything on RBE using these commands:\n\n  $ bazelisk build --config\u003dremote :release :api plugins:core\n  $ bazelisk test --config\u003dremote javatests/...\n\nCorrect, all core plugins use Bazel.\n\n  $ bazelisk test plugins/\u003cplugin_name\u003e:\u003cpugin_name\u003e_tests\n\nAs you have noticed, checks plugin (not a core plugin for now) doesn\u0027t have one single target, but the tests are spreaded across different Bazel packages. That why it would be better to use:\n\n  $ bazelisk test plugins/\u003cplugin_name/...\n\nThat would always work, with one, multiple or even zero test targets.",
      "parentUuid": "d547f58e_2b14fdd7",
      "range": {
        "startLine": 14,
        "startChar": 0,
        "endLine": 33,
        "endChar": 89
      },
      "revId": "511f2237b348ec83b64ede7e81df0bed35f3dc0f",
      "serverId": "173816e5-2b9a-37c3-8a2e-48639d4f1153",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "a753699f_4051cdea",
        "filename": "playbooks/gerrit/build.yaml",
        "patchSetId": 14
      },
      "lineNbr": 33,
      "author": {
        "id": 1011323
      },
      "writtenOn": "2020-04-01T16:11:31Z",
      "side": 1,
      "message": "Just to make it clear: the whole Gerrit and all core plugins build on RBE (:release target) with the Plugin API build (:api target) and running all Java tests (test javatests/...) would take ca. 5 minutes or even less, (depending on cache utilization).",
      "parentUuid": "bcff4dc2_39412572",
      "range": {
        "startLine": 14,
        "startChar": 0,
        "endLine": 33,
        "endChar": 89
      },
      "revId": "511f2237b348ec83b64ede7e81df0bed35f3dc0f",
      "serverId": "173816e5-2b9a-37c3-8a2e-48639d4f1153",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "a1103efe_96e5259a",
        "filename": "playbooks/gerrit/build.yaml",
        "patchSetId": 14
      },
      "lineNbr": 33,
      "author": {
        "id": 1087826
      },
      "writtenOn": "2020-04-01T20:07:53Z",
      "side": 1,
      "message": "\u003e \u003e I\u0027d like to just set the polygerrit tests aside for the moment and focus on the java tests.\n\u003e \n\u003e That was exactly my suggestion. forget PolyGerrit tests for now. Make the rest work. \n\nGreat.  I agree.  I originally wasn\u0027t even trying to make the polygerrit tests work.  But for some reason, the *javatests* need a bunch of node packages installed (like fried-twinkie) to work.  I still don\u0027t understand why.\n\n\u003e make it work on RBE on GCP. For that you need my pending change that built gerrit Docker Image based on Ubuntu 18.04. With that change Zuul should be able to build everything on RBE using these commands:\n\nI think Monty already discussed why it would be better to defer RBE until later.  It\u0027s too much for me right now.  Using RBE is going to require dealing with credentials, the service itself is in beta, and it\u0027s unproven (there are even unmerged changes) required to get it working.\n\nI will be happy to continue to work with you to get simple, straightforward jobs working that build and test on virtual machines.  After that, I will be happy to talk about using docker or RBE for those.  But I just can\u0027t add RBE into the mix now, it\u0027s too much at once.  The need is for validation of changes to these repos, and we\u0027re really close.  Let\u0027s just finish that.\n\n\u003e   $ bazelisk build --config\u003dremote :release :api plugins:core\n\u003e   $ bazelisk test --config\u003dremote javatests/...\n\u003e \n\u003e Correct, all core plugins use Bazel.\n\nOkay, that\u0027s helpful.  But I think I\u0027m still confused on one point, let me ask it very deliberately:\n\nI think there are three cases to handle:\n\n1) A change to the \"gerrit\" repo.\n2) A change to a core plugin repo (eg, \"plugins/replication\")\n3) A change to a non-core plugin repo (eg, \"plugins/checks\")\n\n(Let\u0027s ignore non-bazelisk plugins right now, though I know that\u0027s a possibility for #3.)\n\nWhat bazelisk commands to build and test should we run for each of those three situations?",
      "parentUuid": "bcff4dc2_39412572",
      "range": {
        "startLine": 14,
        "startChar": 0,
        "endLine": 33,
        "endChar": 89
      },
      "revId": "511f2237b348ec83b64ede7e81df0bed35f3dc0f",
      "serverId": "173816e5-2b9a-37c3-8a2e-48639d4f1153",
      "unresolved": true
    }
  ]
}