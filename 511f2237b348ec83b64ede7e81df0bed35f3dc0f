{
  "comments": [
    {
      "key": {
        "uuid": "2a8a9a7e_cceb2d29",
        "filename": "playbooks/gerrit/build.yaml",
        "patchSetId": 14
      },
      "lineNbr": 33,
      "author": {
        "id": 1006192
      },
      "writtenOn": "2020-04-01T11:35:06Z",
      "side": 1,
      "message": "Can\u0027t we just use the Docker image we have and reuse it in Zuul?\n\nThere are two advantages in doing that:\n1. We speedup the migration process from the current Jenkins build to Zuul\n2. We keep them in sync until we \"unplug\" Jenkins: they are the same image\n3. We allow people to run the build locally *exactly in the same way* Zuul would do it\n\nWDYT?",
      "range": {
        "startLine": 14,
        "startChar": 0,
        "endLine": 33,
        "endChar": 89
      },
      "revId": "511f2237b348ec83b64ede7e81df0bed35f3dc0f",
      "serverId": "173816e5-2b9a-37c3-8a2e-48639d4f1153",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "87a1b2e2_a393c45d",
        "filename": "playbooks/gerrit/build.yaml",
        "patchSetId": 14
      },
      "lineNbr": 33,
      "author": {
        "id": 1011323
      },
      "writtenOn": "2020-04-01T12:59:25Z",
      "side": 1,
      "message": "\u003e Can\u0027t we just use the Docker image we have and reuse it in Zuul?\n\nThe plan was always to use RBE in GCP. With my recent change (still pending for review: [1]), we are consuming are own GCP Docker image (with upgraded Git core version to 2.6). That Docker image is based on Ubuntu 18.04. Our current Docker image used in Jenkins GerritForge build is based on outdated Debian release and outdated Chromuim release 1.69.xxx. Attempt to bump Debian image is stale: [2].\n\nBecause of action caches current Jenkins Docker image is 5 GB big. With RBE on GCP, the caching problem is solved.\n\nMoreover specific Docker image is only needed for PolyGerrit tests, that is basically unrelated to Gerrit backend tests.\n\nMajor build targets and java tests with NoteDb and ReviewDb modes can use RBE already today:\n\n  $ bazelisk build --config\u003dremote :release :api plugins:core\n  $ bazelisk test --config\u003dremote javatests/...\n\nit takes a couple of minutes, and uses extensively caching.\n\nShould we take PolyGerrit verification out of the picture for now in Zuul intergration and just move forward with RBE on GCP?\n\n* [1] https://gerrit-review.googlesource.com/c/gerrit/+/260873\n* [2] https://gerrit-review.googlesource.com/c/gerrit-ci-scripts/+/237181",
      "parentUuid": "2a8a9a7e_cceb2d29",
      "range": {
        "startLine": 14,
        "startChar": 0,
        "endLine": 33,
        "endChar": 89
      },
      "revId": "511f2237b348ec83b64ede7e81df0bed35f3dc0f",
      "serverId": "173816e5-2b9a-37c3-8a2e-48639d4f1153",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "bf0f5ed6_0bc97e2d",
        "filename": "playbooks/gerrit/build.yaml",
        "patchSetId": 14
      },
      "lineNbr": 33,
      "author": {
        "id": 1006192
      },
      "writtenOn": "2020-04-01T13:12:49Z",
      "side": 1,
      "message": "\u003e \u003e Can\u0027t we just use the Docker image we have and reuse it in Zuul?\n\u003e \n\u003e The plan was always to use RBE in GCP. With my recent change (still pending for review: [1]), we are consuming are own GCP Docker image (with upgraded Git core version to 2.6).\n\n+1\n\nRBE is optional though in our build process: we do not require all developers to use RBE isn\u0027t it? We should also offer the ability to build *without* RBE.\n\n\u003e That Docker image is based on Ubuntu 18.04. Our current Docker image used in Jenkins GerritForge build is based on outdated Debian release and outdated Chromuim release 1.69.xxx. Attempt to bump Debian image is stale: [2].\n\nThat\u0027s a different point, Chrome 80 breaks our tests and the Debian upgrade won\u0027t allow to build and test with Java 8.\n\nOnce we sort out both of them we can upgrade our Debian. \n\n\u003e Because of action caches current Jenkins Docker image is 5 GB big. With RBE on GCP, the caching problem is solved.\n\n+1, agreed.\n\n\u003e Moreover specific Docker image is only needed for PolyGerrit tests, that is basically unrelated to Gerrit backend tests.\n\nYes, PolyGerrit is the guy that has pre-requisites. For the Gerrit tests, only Java + Docker are needed. Does RBE support the ability to use a Docker server through DOCKER_HOST?\n\n\u003e Major build targets and java tests with NoteDb and ReviewDb modes can use RBE already today:\n\u003e \n\u003e   $ bazelisk build --config\u003dremote :release :api plugins:core\n\u003e   $ bazelisk test --config\u003dremote javatests/...\n\nWHy don\u0027t we start using them today?\n\n\u003e it takes a couple of minutes, and uses extensively caching.\n\nYeah, that\u0027s super-cool :-)\n\n\u003e Should we take PolyGerrit verification out of the picture for now in Zuul intergration and just move forward with RBE on GCP?\n\nYou mean having a mixed environment, backend tests verified with Zuul and PolyGerrit tests with Jenkins? I believe it would be messy.\n\nAlso, we do need Docker for the backend tests.",
      "parentUuid": "87a1b2e2_a393c45d",
      "range": {
        "startLine": 14,
        "startChar": 0,
        "endLine": 33,
        "endChar": 89
      },
      "revId": "511f2237b348ec83b64ede7e81df0bed35f3dc0f",
      "serverId": "173816e5-2b9a-37c3-8a2e-48639d4f1153",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "dc2683b2_2ae75a78",
        "filename": "playbooks/gerrit/build.yaml",
        "patchSetId": 14
      },
      "lineNbr": 33,
      "author": {
        "id": 1087826
      },
      "writtenOn": "2020-04-01T14:41:25Z",
      "side": 1,
      "message": "I still think there is value in fully understanding what is required for the tests even if we use docker or RBE later.  The latest patchset is actually passing tests.  If you follow the link to the buildset information, you will see that it is succeeding for the three stable branches; it might even succeed for the master branch, but it\u0027s taking a long time and hit the timeout (if you didn\u0027t notice this, this is why I think subchecks are important).\n\nHere\u0027s the link to the results:\n\nhttps://ci.gerritcodereview.com/t/gerrit/buildset/cc7576d0ea584e7c93501682b64dcff3\n\nLet\u0027s just look at the stable-3.1 branch for the moment.  If I break down the time used for each part of the job:\n\nCopy git repos onto remote node: 4m\nPrepare submodules: 4m\nInstall deps: 2m\nBazelisk build: 25m\ngen_api_install: 0m\napi_install: 0m\neclipse/project.py: 2m\nbazelisk test: 79m\npolygerrit-ui/app/run_test.sh: 1m\n\nIf we categorize those a bit, we are spending:\n\n8 minutes performing Zuul-required setup.  We can speed that up later with caching, but for now, let\u0027s just discount it.\n\n2 minutes installing dependencies.  If we used docker, we would save these two minutes, but add a little time to download the image.  This is not very much time, so I don\u0027t think we should focus our efforts here at the moment.\n\n25 minutes running bazelisk build.  Now I have three questions about this:\n1) Is bazelisk build necessary before bazelisk test?\n2) If not, would it speed anything up to omit it?\n3) Obviously we should build all of gerrit when we are evaluating a change to gerrit, but I think earlier Thomas suggested that in the core plugin jobs, we might be able to just build/test the core plugin.  Which is the best approach for a core plugin test job?  Build all of gerrit with all the plugins, or build just plugin that is changing?\n\nNo time is used running the api_install and eclipse project scripts.  I\u0027m curious what those are and what they do to set up for the unit tests?  Or are they here just to exercise them to make sure they don\u0027t have errors?\n\n79 minutes running bazelisk test.  Is it expected that these should take so long?  We\u0027re running on an n1-standard-2 VM, that\u0027s 2vcpus with 8G of ram.  should we bump that up to a 2vcpu machine?\n\nFinally, it\u0027s looking like the ./polygerrit-ui/app/run_test.sh didn\u0027t run any tests.  However, adding in the polygerrit dependencies at the start of the job did enable the java tests to succeed (they were failing with polygerrit errors earlier).  So can you explain why the java tests require a bunch of npm modules?  And does this polygerrit script at the end require a build of gerrit, or can it run standalone in its own job?\n\nThanks again for helping me understand what\u0027s going on here.",
      "parentUuid": "bf0f5ed6_0bc97e2d",
      "range": {
        "startLine": 14,
        "startChar": 0,
        "endLine": 33,
        "endChar": 89
      },
      "revId": "511f2237b348ec83b64ede7e81df0bed35f3dc0f",
      "serverId": "173816e5-2b9a-37c3-8a2e-48639d4f1153",
      "unresolved": true
    }
  ]
}